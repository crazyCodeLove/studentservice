server:
  port: 8060
  tomcat:
    max-connections: 5000 #最大连接数
    uri-encoding: utf-8

spring:
  application:
    name: student-service-provider
  jackson:
    date-format: yyyy-MM-dd HH:mm:ss
    time-zone: GMT+8
    defaultPropertyInclusion: non_null   #非空属性才序列化
    deserialization:
      FAIL_ON_UNKNOWN_PROPERTIES: false #未定义的key不反序列化
  #对返回的时间进行格式化
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    druid:
      student:
        url: jdbc:mysql://127.0.0.1:3306/student_service?allowMultiQueries=true&useUnicode=true&characterEncoding=UTF-8&useSSL=false&useTimezone=true&serverTimezone=GMT%2
        username: root
        password: root123
      log1:
        url: jdbc:mysql://127.0.0.1:3306/log1?allowMultiQueries=true&useUnicode=true&characterEncoding=UTF-8&useSSL=false
        username: root
        password: root123
      log2:
        url: jdbc:mysql://127.0.0.1:3306/log2?allowMultiQueries=true&useUnicode=true&characterEncoding=UTF-8&useSSL=false
        username: root
        password: root123

  redis:
    database: 1 #Redis数据库索引（默认为0）
    lettuce:
      pool:
        max-active: 20 #连接池最大连接数（使用负值表示没有限制）
        max-idle: 10 #连接池中的最大空闲连接
        min-idle: 10 #连接池中的最小空闲连接
        max-wait: 5s #连接池最大阻塞等待时间（使用负值表示没有限制）
    host: 127.0.0.1
    port: 6379
    timeout: 2s #此参数为设置客户端空闲超过timeout，服务端会断开连接
#  rabbitmq:
#    host: 127.0.0.1
#    port: 5672
#    username: guest
#    password: guest
#    virtual-host: /seal
#    listener:
#      simple:
#        concurrency: 3 #并发消费者初始化值
#        max-concurrency: 20 #并发消费者的最大值
#        prefetch: 5 #每个消费者每次监听时可拉取处理的消息数量
#    publisher-returns: true
#rabbitmq:
#  cache:
#    channel:
#      size: 100
#      checkout-timeout: 4000

mybatis:
  mapper-locations: classpath:mapper/*.xml
  configuration:
    map-underscore-to-camel-case: true
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
    variables:
      logTablename: log2019 #log 的表名

# 显示 sql， 配置到 mapper 所在目录
# 方式一：
#logging:
#  level:
#    com.sse.adapter.mybatis: DEBUG
#
# 方式二：
#mybatis:
#  configuration:
#    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl

eureka:
  instance:
    preferIpAddress: true
    hostname: 127.0.0.1
    instanceId: ${spring.cloud.client.ipAddress:127.0.0.1}:${server.port}
  client:
    registerWithEureka: true
    fetchRegistry: true
    serviceUrl:
      defaultZone: http://${eureka.instance.hostname}:${eureka.port:8010}/eureka/
    enabled: false

secure:
  key: 1234qwer!@#

